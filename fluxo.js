// üìå 1. Estruturas de Decis√£o (Condicionais)


// if: Verifica uma condi√ß√£o e executa um bloco de c√≥digo se a condi√ß√£o for verdadeira.
let idade = 18;
if (idade >= 18) {
    console.log("Maior de idade");
}

// if...else: Verifica uma condi√ß√£o e executa um bloco de c√≥digo se a condi√ß√£o for verdadeira, 
// ou outro bloco se a condi√ß√£o for falsa.
if (idade < 18) {
    console.log("Menor de idade");
} else {
    console.log("Maior de idade");
}

// if...else if...else: Verifica v√°rias condi√ß√µes, executando o primeiro bloco que for verdadeiro.
let nota = 8;
if (nota >= 9) {
    console.log("Excelente");
} else if (nota >= 7) {
    console.log("Bom");
} else {
    console.log("Precisa melhorar");
}

// Operador Tern√°rio: Forma compacta de if...else, ideal para decis√µes simples.
let resultado = (idade >= 18) ? "Maior de idade" : "Menor de idade";
console.log(resultado); // Maior de idade


// üìå 2. Estruturas de Repeti√ß√£o (La√ßos de Repeti√ß√£o)

// while: Executa um bloco de c√≥digo enquanto a condi√ß√£o for verdadeira.
let contador = 0;
while (contador < 5) {
    console.log(contador); // 0 1 2 3 4
    contador++;
}

// do...while: Executa o bloco de c√≥digo pelo menos uma vez, e depois repete enquanto a condi√ß√£o for verdadeira.
let numero = 0;
do {
    console.log(numero); // 0 1 2 3 4
    numero++;
} while (numero < 5);

// for: Executa um bloco de c√≥digo um n√∫mero espec√≠fico de vezes.
for (let i = 0; i < 5; i++) {
    console.log(i); // 0 1 2 3 4
}

// for...of: Itera sobre os elementos de um array ou objeto iter√°vel.
let frutas = ["ma√ß√£", "banana", "laranja"];
for (let fruta of frutas) {
    console.log(fruta); // ma√ß√£ banana laranja
}

// for...in: Itera sobre as propriedades de um objeto.
let pessoa = { nome: "John", idade: 30, cidade: "New York" };
for (let chave in pessoa) {
    console.log(chave + ": " + pessoa[chave]); 
    // nome: John
    // idade: 30
    // cidade: New York
}


// üìå 3. Controle de Fluxo - break, continue, return

// break: Interrompe a execu√ß√£o de um la√ßo (while, for, etc.) prematuramente.
for (let i = 0; i < 10; i++) {
    if (i === 5) {
        break; // Interrompe o la√ßo quando i √© igual a 5
    }
    console.log(i); // 0 1 2 3 4
}

// continue: Pula a execu√ß√£o da itera√ß√£o atual de um la√ßo e vai para a pr√≥xima itera√ß√£o.
for (let i = 0; i < 5; i++) {
    if (i === 3) {
        continue; // Pula quando i √© igual a 3
    }
    console.log(i); // 0 1 2 4
}

// return: Usado dentro de fun√ß√µes para retornar um valor e interromper a execu√ß√£o da fun√ß√£o.
function soma(a, b) {
    return a + b;
}
let resultadoSoma = soma(10, 20);
console.log(resultadoSoma); // 30


// üìå 4. Estruturas de Controle com Exce√ß√µes - try...catch

// try...catch: Permite tratar erros sem interromper o programa.
try {
    let resultado = 10 / 0;
    console.log(resultado); // Infinity
    let resultadoInvalido = a + b; // erro, 'a' e 'b' n√£o est√£o definidos
} catch (erro) {
    console.log("Ocorreu um erro: " + erro.message); // Ocorreu um erro: a is not defined
}

