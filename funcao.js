// üìå 1. Fun√ß√µes Declaradas


// Uma fun√ß√£o simples que n√£o recebe par√¢metros e n√£o retorna nada.
function saudacao() {
    console.log("Ol√°, seja bem-vindo!");
}

saudacao(); // Ol√°, seja bem-vindo!

// Fun√ß√£o que recebe par√¢metros e retorna um valor.
function somar(a, b) {
    return a + b;
}

let resultado = somar(5, 10);
console.log(resultado); // 15

// Fun√ß√£o com par√¢metros default
function multiplicar(a, b = 2) {
    return a * b;
}

console.log(multiplicar(3)); // 6 (b tem o valor default de 2)
console.log(multiplicar(3, 4)); // 12 (b √© 4, como foi passado)

// Fun√ß√£o que pode receber n√∫mero vari√°vel de par√¢metros
function mostrarValores(...valores) {
    console.log(valores); // Array com todos os valores passados
}

mostrarValores(1, 2, 3); // [1, 2, 3]
mostrarValores("a", "b", "c", 4); // ['a', 'b', 'c', 4]

// üìå 2. Fun√ß√µes An√¥nimas (ou Fun√ß√µes de Express√£o)

// Uma fun√ß√£o an√¥nima armazenada em uma vari√°vel
const subtrair = function(a, b) {
    return a - b;
};

console.log(subtrair(10, 5)); // 5

// Fun√ß√µes an√¥nimas tamb√©m podem ser passadas como argumentos
setTimeout(function() {
    console.log("Esta mensagem √© exibida ap√≥s 2 segundos");
}, 2000); // Exibe a mensagem ap√≥s 2 segundos

// üìå 3. Fun√ß√µes Arrow (Fun√ß√µes de seta)

const dividir = (a, b) => {
    return a / b;
};



console.log(dividir(10, 2)); // 5

// Se a fun√ß√£o tiver apenas uma express√£o, podemos omitir as chaves e o return
const quadrado = x => x * x;

console.log(quadrado(4)); // 16

// üìå 4. Fun√ß√µes Recursivas
// Fun√ß√£o que chama a si mesma

function fatorial(n) {
    if (n === 0 || n === 1) {
        return 1;
    } else {
        return n * fatorial(n - 1); // Chama a fun√ß√£o novamente
    }
}

console.log(fatorial(5)); // 120 (5 * 4 * 3 * 2 * 1)

// üìå 5. Fun√ß√µes como Par√¢metros (Passando fun√ß√µes para outras fun√ß√µes)

function executarOperacao(a, b, operacao) {
    return operacao(a, b);
}

const soma = (a, b) => a + b;
const multiplicacao = (a, b) => a * b;

console.log(executarOperacao(3, 4, soma)); // 7
console.log(executarOperacao(3, 4, multiplicacao)); // 12

// üìå 6. Fun√ß√µes com retorno de valores e sem retorno

// Fun√ß√£o que retorna um valor
function obterNome() {
    return "John Doe";
}

let nome = obterNome();
console.log(nome); // John Doe

// Fun√ß√£o que n√£o retorna nada (void)
function exibirMensagem() {
    console.log("Mensagem exibida");
}

exibirMensagem(); // Mensagem exibida


// üìå 7. Fun√ß√µes com Par√¢metros e Retorno Default

// Se n√£o for passado um valor para o par√¢metro, o valor default ser√° utilizado.
function saudacaoPersonalizada(nome = "Usu√°rio") {
    console.log(`Ol√°, ${nome}!`);
}

saudacaoPersonalizada(); // Ol√°, Usu√°rio!
saudacaoPersonalizada("Maria"); // Ol√°, Maria!

